// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  username      String?   @unique
  location      String?
  website       String?
  githubUrl     String?
  linkedinUrl   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  submissions Submission[]
  problems    Problem[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Problem {
  id            String     @id @default(cuid())
  title         String
  slug          String     @unique
  description   String
  difficulty    Difficulty
  tags          String[]
  hints         String[]
  constraints   String?
  examples      Json[]
  codeTemplates Json
  solutionCode  Json?
  testCases     TestCase[]

  isPublished         Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  authorId            String
  author              User     @relation(fields: [authorId], references: [id])
  totalSubmissions    Int      @default(0)
  acceptedSubmissions Int      @default(0)

  submissions Submission[]

  @@map("problems")
}

model TestCase {
  id        String  @id @default(cuid())
  problemId String
  input     String
  output    String
  isHidden  Boolean @default(false)

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("test_cases")
}

model Submission {
  id        String           @id @default(cuid())
  userId    String
  problemId String
  language  Language
  code      String
  status    SubmissionStatus @default(PENDING)

  executionTime Int?
  memoryUsed    Int?
  testsPassed   Int?    @default(0)
  totalTests    Int?    @default(0)
  errorMessage  String?
  judge0Token   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}

enum Language {
  CPP
  PYTHON
  JAVASCRIPT
}
